version: 2.1
orbs:
  codecov: codecov/codecov@1.0.5
jobs:
  test_backend:
    docker:
      - image: circleci/rust:1.44
      - image: circleci/postgres:12-ram
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: postgres
    working_directory: ~/kschoon.me/backend
    steps:
      - checkout:
          path: ~/kschoon.me
      - run:
          name: Calculate dependencies
          command: cargo generate-lockfile
      - restore_cache:
          keys:
            - deps4-{{ .Branch }}-{{ checksum "Cargo.lock" }}
      - run:
          name: Install diesel-cli
          command: CARGO_TARGET_DIR="target/diesel_cli" cargo install diesel_cli --no-default-features --features "postgres"
      - run: cargo build --all --all-targets
      - save_cache:
          key: deps4-{{ .Branch }}-{{ checksum "Cargo.lock" }}
          paths:
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
            - target/diesel_cli
      - run: echo DATABASE_URL=postgres://postgres:postgres@localhost/postgres > .env
      - run:
          name: Run diesel migrations
          command: /usr/local/cargo/bin/diesel migration run
      - run: cargo test

  test_ansible:
    docker:
      - image: circleci/python:3.8.2
    working_directory: ~/kschoon.me/deploy
    steps:
      - checkout:
          path: ~/kschoon.me
      - restore_cache:
          keys:
            - deps1-deploy-{{ checksum "poetry.lock" }}
      - run: poetry install
      - save_cache:
          key: deps1-deploy-{{ checksum "poetry.lock" }}
          paths:
            - ~/.cache/pypoetry/virtualenvs
      - run: poetry run ansible-lint

  test_terraform:
    docker:
      - image: hashicorp/terraform:light
        environment:
          TF_WORKSPACE: production
          TF_IN_AUTOMATION: "1"

    working_directory: ~/kschoon.me/deploy
    steps:
      - checkout:
          path: ~/kschoon.me
      - run: terraform init -backend=false
      - run: terraform validate

  terraform_plan:
    docker:
      - image: hashicorp/terraform:light
        environment:
          TF_WORKSPACE: production
          TF_IN_AUTOMATION: "1"

    working_directory: ~/kschoon.me/deploy
    steps:
      - checkout:
          path: ~/kschoon.me
      - run: echo "credentials \"app.terraform.io\" { token = \"$TF_REGISTRY_TOKEN\" }" >>$HOME/.terraformrc
      - run: terraform init
      - run: terraform plan -input=false -out=terraform.plan
      - persist_to_workspace:
          root: ~/kschoon.me/deploy/
          paths:
            - terraform.plan

  deploy_orchestration:
    docker:
      - image: hashicorp/terraform:light
        environment:
          TF_WORKSPACE: production
          TF_IN_AUTOMATION: "1"

    working_directory: ~/kschoon.me/deploy
    steps:
      - checkout:
          path: ~/kschoon.me
      - attach_workspace:
          at: ~/kschoon.me/deploy/
      - run: echo "credentials \"app.terraform.io\" { token = \"$TF_REGISTRY_TOKEN\" }" >>$HOME/.terraformrc
      - run: terraform init
      - run: terraform apply -input=false -auto-approve terraform.plan

  deploy_configuration:
    docker:
      - image: circleci/python:3.8.2
    working_directory: ~/kschoon.me/deploy
    steps:
      - checkout:
          path: ~/kschoon.me
      - add_ssh_keys:
          fingerprints:
            - df:88:a5:4b:47:9f:76:c8:1d:2c:a4:bb:04:9b:38:a2
      - restore_cache:
          keys:
            - deps1-deploy-{{ checksum "poetry.lock" }}
      - run: poetry install
      - run: echo $ANSIBLE_VAULT_PASSWORD > ~/.vault_pass
      - save_cache:
          key: deps1-deploy-{{ checksum "poetry.lock" }}
          paths:
            - ~/.cache/pypoetry/virtualenvs
      - run: poetry run ansible-playbook -i digital_ocean.py site.yml --vault-password-file ~/.vault_pass

workflows:
  version: 2
  test_application:
    jobs:
      - test_backend
      - test_ansible
      - test_terraform
      - terraform_plan:
          requires:
            - test_terraform
          context: kschoon.me-global
      - hold:
          type: approval
          requires:
            - test_backend
            - test_ansible
            - terraform_plan
          filters:
            branches:
              only:
                - master
      - deploy_orchestration:
          requires:
            - hold
          context: kschoon.me-global
          filters:
            branches:
              only:
                - master
      - deploy_configuration:
          requires:
            - deploy_orchestration
          context: kschoon.me-global
          filters:
            branches:
              only:
                - master
