---
- name: Check if terraform variables are set
  assert:
    that:
      - "postgres_fqdn != ''"
      - "redis_access_key != ''"
      - "redis_ssl_port != ''"
      - "redis_hostname != ''"
    fail_msg: "Could not find all variables to should be specified by terraform. Please check that './group_vars/terraform.yml' exists and/or if the variable names have changed."

- name: "Install docker on the host"
  include: ./docker.yml

- name: "Create the API user"
  user:
    name: "{{ API_USER }}"
    comment: "User responsible for managing the API"
    system: yes
    groups:
      - docker
    uid: "{{ API_USER_UID }}"
  become: yes

- name: "Clone the kschoon.me repo"
  git:
    repo: "https://github.com/kevinschoonover/kschoon.me.git"
    dest: "{{ API_INSTALLATION_DIR }}"
    version: "master"
  become: yes

- name: "Update the API installation directory permissions"
  file:
    path: "{{ API_INSTALLATION_DIR }}"
    owner: "{{ API_USER }}"
    state: directory
    recurse: yes
  become: yes

- name: "Create the .env file for the backend"
  template:
    src: "web.env.j2"
    dest: "{{ API_INSTALLATION_DIR }}/backend/.env"
    owner: "{{ API_USER }}"
  vars:
    # URL encoded as @ in usernames / passwords are not supported
    WEB_DATABASE_URL: "postgres://{{ postgres_username }}%40{{ postgres_fqdn.split('.')[0] }}:{{ postgres_password.replace('@', '%40')}}@{{ postgres_fqdn }}:5432/{{ postgres_identity_db }}?sslmode=require"
  become: yes
  become_user: "{{ API_USER }}"

- name: "Create the .env file for the identity service"
  template:
    src: "identity.env.j2"
    dest: "{{ API_INSTALLATION_DIR }}/.docker/identity.env"
    owner: "{{ API_USER }}"
  vars:
    # URL encoded as @ in usernames / passwords are not supported
    IDENTITY_POSTGRES_URL: "postgres://{{ postgres_username }}%40{{ postgres_fqdn.split('.')[0] }}:{{ postgres_password.replace('@', '%40')}}@{{ postgres_fqdn }}:5432/{{ postgres_checkins_db }}?sslmode=require"
  become: yes
  become_user: "{{ API_USER }}"


- name: "Create the .env file for the faktory container"
  template:
    src: "faktory.env.j2"
    dest: "{{ API_INSTALLATION_DIR }}/.docker/faktory.env"
    owner: "{{ API_USER }}"
  become: yes
  become_user: "{{ API_USER }}"

- name: "Create the .env file for the sso container"
  template:
    src: "sso.env.j2"
    dest: "{{ API_INSTALLATION_DIR }}/.docker/sso.env"
    owner: "{{ API_USER }}"
  vars:
    redis_url: rediss://:{{ redis_access_key | urlencode }}@{{ redis_hostname }}:{{ redis_ssl_port }}/0
  become: yes
  become_user: "{{ API_USER }}"

- name: "See if acme file exists"
  stat:
    path: "{{ ACME_FILE_PATH }}"
  register: acme_file

- name: "Create or update the acme.json"
  file:
    path: "{{ ACME_FILE_PATH }}"
    owner: "{{ API_USER }}"
    state: "{{ 'file' if  acme_file.stat.exists else 'touch' }}"
    mode: 0600
  become: yes
  become_user: "{{ API_USER }}"

- name: "Add the jwks.json file to sso"
  copy:
    src: "{{ role_path }}/../../.keys/jwks.json"
    dest: "{{ API_INSTALLATION_DIR }}/sso/src/"
    owner: "{{ API_USER }}"
    mode: 0600
  become: yes
  become_user: "{{ API_USER }}"

- name: Check if KSCHOONME_DOMAIN is set
  assert:
    that:
      - "KSCHOONME_DOMAIN != ''"
    fail_msg: "Could not find the 'KSCHOONME_DOMAIN' variable. Please set in the appropriate environment file."

- name: "Start the API"
  vars:
    DOCKER_DIR: "{{ API_INSTALLATION_DIR }}/"
  docker_compose:
    pull: yes
    files:
      - docker-compose.yml
      - docker-compose.production.yml
    project_src: "{{ DOCKER_DIR }}"
  become: yes
  become_user: "{{ API_USER }}"
  environment:
    KSCHOONME_DOMAIN: "{{ KSCHOONME_DOMAIN }}"
