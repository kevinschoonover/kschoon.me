name: Test and Deploy the Application

on: [push]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Lint Code Base
      uses: docker://github/super-linter:v3
      env:
        VALIDATE_ALL_CODEBASE: false
        DEFAULT_BRANCH: master
        VALIDATE_JAVASCRIPT_ES: false
        TYPESCRIPT_ES_CONFIG_FILE: false

  frontend_tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./checkin
    strategy:
      matrix:
        node-version: [12.x]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - name: Use Node.js
      uses: actions/setup-node@v1
      with:
        node-version: '12.x'
    - name: Cache Node.js modules
      uses: actions/cache@v1
      with:
        path: ~/.cache/yarn # npm cache files are stored in `~/.npm` on Linux/macOS
        key: ${{ runner.OS }}-node-frontend-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.OS }}-node-frontend-${{ hashFiles('**/yarn.lock') }}
          ${{ runner.OS }}-node-frontend-
          ${{ runner.OS }}-
    - name: Install dependencies
      run: yarn --frozen-lockfile
    - name: Run tests
      run: CI=true yarn test

  backend_tests:
    runs-on: ubuntu-latest
    env:
      working_directory: ./backend
    defaults:
      run:
        working-directory: ${{ env.working_directory }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ./backend/target
          key: ${{ runner.os }}-backend-${{ hashFiles('**/Cargo.lock') }}
      - run: cargo build --release --all-features
      - run: cargo test

  terraform_plan:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./deploy

    env:
      terraform_version: 0.13.0
      TF_VAR_do_token: ${{ secrets.DO_ACCESS_TOKEN }}
      TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      TF_WORKSPACE: production

    steps:
      - uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v1.1.0
        with:
          terraform_version: ${{ env.terraform_version }}
          cli_config_credentials_token: ${{ secrets.TF_CLOUD_TOKEN }}
      - run: terraform init -input=false
      - run: terraform plan -out=tfplan -input=false -no-color
      - name: Upload terraform plan
        uses: actions/upload-artifact@v1
        with:
          name: tfplan
          path: ./deploy/tfplan

  docker_sso_publish:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: kschoonme/sso
      working_directory: ./sso/
      DOCKERHUB_USERNAME: kschoonie

    if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build . --file Dockerfile --tag image --target production
        working-directory: ${{env.working_directory}}

      - name: Log into registry
        run: echo "${{ secrets.DOCKERHUB_PASS }}" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

      - name: Push image
        run: |
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_NAME=$IMAGE_NAME
          echo VERSION=$VERSION

          docker tag image $IMAGE_NAME:$VERSION
          docker push $IMAGE_NAME:$VERSION

  docker_identity_publish:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: kschoonme/identity
      working_directory: ./identity/
      DOCKERHUB_USERNAME: kschoonie

    if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build . --file Dockerfile --tag image --target production
        working-directory: ${{env.working_directory}}

      - name: Log into registry
        run: echo "${{ secrets.DOCKERHUB_PASS }}" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

      - name: Push image
        run: |
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_NAME=$IMAGE_NAME
          echo VERSION=$VERSION

          docker tag image $IMAGE_NAME:$VERSION
          docker push $IMAGE_NAME:$VERSION

  docker_backend_publish:
    needs: [backend_tests]

    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: kschoonme/backend
      working_directory: ./backend/
      DOCKERHUB_USERNAME: kschoonie

    if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build . --file Dockerfile --tag image --target production
        working-directory: ${{env.working_directory}}

      - name: Log into registry
        run: echo "${{ secrets.DOCKERHUB_PASS }}" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

      - name: Push image
        run: |
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_NAME=$IMAGE_NAME
          echo VERSION=$VERSION

          docker tag image $IMAGE_NAME:$VERSION
          docker push $IMAGE_NAME:$VERSION

  docker_notifications_publish:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: kschoonme/notifications
      working_directory: ./notifications
      DOCKERHUB_USERNAME: kschoonie

    if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build . --file Dockerfile --tag image --target production
        working-directory: ${{env.working_directory}}

      - name: Log into registry
        run: echo "${{ secrets.DOCKERHUB_PASS }}" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

      - name: Push image
        run: |
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_NAME=$IMAGE_NAME
          echo VERSION=$VERSION

          docker tag image $IMAGE_NAME:$VERSION
          docker push $IMAGE_NAME:$VERSION

  docker_faktory_worker_publish:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: kschoonme/faktory-worker
      working_directory: ./backend/worker
      DOCKERHUB_USERNAME: kschoonie

    if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build . --file Dockerfile --tag image --target production
        working-directory: ${{env.working_directory}}

      - name: Log into registry
        run: echo "${{ secrets.DOCKERHUB_PASS }}" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

      - name: Push image
        run: |
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_NAME=$IMAGE_NAME
          echo VERSION=$VERSION

          docker tag image $IMAGE_NAME:$VERSION
          docker push $IMAGE_NAME:$VERSION

  deploy:
    needs: [docker_faktory_worker_publish, docker_backend_publish, frontend_tests, lint]
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.8]

    defaults:
      run:
        working-directory: ./deploy

    env:
      terraform_version: 0.13.0
      TF_VAR_do_token: ${{ secrets.DO_ACCESS_TOKEN }}
      TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      TF_WORKSPACE: production

    if: github.ref == 'refs/heads/master'
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install poetry
      run: |
        python -m pip install --upgrade pip
        pip install poetry
    - name: Cache poetry environments
      uses: actions/cache@v1
      with:
        path: ~/.cache/pypoetry/virtualenvs # npm cache files are stored in `~/.npm` on Linux/macOS
        key: ${{ runner.OS }}-deploy-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.OS }}-deploy-${{ hashFiles('**/poetry.lock') }}
          ${{ runner.OS }}-deploy-
          ${{ runner.OS }}-
    - name: Install dependencies with poetry
      run: poetry install

    - name: Download terraform plan
      uses: actions/download-artifact@v1
      with:
        name: tfplan
        path: ./deploy/

    - uses: hashicorp/setup-terraform@v1.1.0
      with:
        terraform_version: ${{ env.terraform_version }}
        cli_config_credentials_token: ${{ secrets.TF_CLOUD_TOKEN }}

    - run: terraform init -input=false
    - run: terraform apply -auto-approve tfplan

    - name: Setup deployment SSH key
      uses: webfactory/ssh-agent@v0.2.0
      with:
        ssh-private-key: ${{ secrets.DEPLOY_SSH_PRIV_KEY }}

    - name: Create vault password file
      run: echo ${{ secrets.ANSIBLE_VAULT_PASSWORD }} > ~/.vault_pass

    - name: Copy digital_ocean.examples.ini
      run: cp digital_ocean.examples.ini digital_ocean.ini

    - name: Deploy application with ansible
      run: poetry run ansible-playbook -i digital_ocean.py site.yml --vault-password-file ~/.vault_pass
      env:
        DO_API_TOKEN: ${{ secrets.DO_ACCESS_TOKEN }}
